package com.practice.euler;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;

/**
 * Problem webpage: http://projecteuler.net/problem=29
 * The code below use a brute force approach, but we can also use a math way to get the answer, refer to the link below:
 * http://www.mathblog.dk/project-euler-29-distinct-terms-sequence-ab/
 */
public class DistinctPowers {

	/**
	 * Get the count of distinct powers generated by a^b for 2 ¡Ü a ¡Ü maxA and 2 ¡Ü b ¡Ü maxB
	 * @param maxA
	 * @param maxB
	 * @return
	 */
	public static int countDistinctPowers(int maxA, int maxB) {
		Set<BigInteger> powers = new HashSet<BigInteger>();
		for (int a = 2; a <= maxA; a++) {
			for (int b = 2; b <= maxB; b++) {
				powers.add(BigInteger.valueOf(a).pow(b));
			}
		}
		return powers.size();
	}
	
	public static void main(String[] args) {
		System.out.println(countDistinctPowers(100, 100));
	}

}
